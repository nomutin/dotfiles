" >>> curl -s https://raw.githubusercontent.com/nomutin/dotfiles/master/config/vimrc -o ~/.vimrc

" ===== Builtin =====
set encoding=utf-8 " options: 24
scriptencoding utf-8
set runtimepath^=~/.vim runtimepath+=~/.vim/after " 1
set incsearch ignorecase smartcase " 2
set nowrap list listchars=tab:>\ ,trail:-,extends:>,precedes:<,nbsp:+ scrolloff=4 number" 4
set hlsearch cursorline " 5
set hidden " 6
set shortmess=filnxtToO ruler " 11
set clipboard=unnamed "12
set undofile undodir=~/.vim/undo completeopt=menuone,noinsert,noselect pumheight=10 | call mkdir($HOME.'/.vim/undo', 'p') " 13
set tabstop=4 shiftwidth=4 expandtab " 14
set autoread " 18
set noswapfile " 19
set wildmenu " 20
set viminfo= " 25
aug qf_wrap | au! | autocmd FileType qf setl wrap nonu nornu | aug END
if has('vim_starting') | let &t_SI .= "\e[6 q" | let &t_EI .= "\e[2 q" | let &t_SR .= "\e[4 q" | endif
let g:netrw_banner = 0 | let g:netrw_liststyle = 3 | let g:netrw_altv = 1 | let g:netrw_winsize = -28

" ===== KeyMappings =====
let g:mapleader = "\<space>"
inoremap <silent> jk <Esc>
nnoremap <ESC><ESC> <CMD>nohlsearch<CR>
nnoremap <Leader>d <CMD>new<BAR>exec 'read !git show HEAD:#'<BAR>setl bt=nofile ro<BAR>difft<BAR>winc p<BAR>difft<CR>
nnoremap <Leader>n <CMD>Lex<CR>
function! OpenTerm()
    if len(term_list()) | exec "bo sb" term_list()[0] | exec 'normal i' | else | exec "bo term" | endif
endfunction
nnoremap <silent> <C-j> <CMD>call OpenTerm()<CR>
tnoremap <silent> <C-j> <C-\><C-n><CMD>b#<BAR>close<CR>

" ===== ColorScheme =====
hi LineNr ctermfg=gray
hi CursorLineNr ctermfg=cyan cterm=bold gui=NONE
hi CursorLine cterm=none ctermbg=237
hi Pmenu ctermfg=white ctermbg=black

" ===== Plugin =====
if empty(glob('~/.vim/plugged'))
    let plug_url = 'https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim'
    silent execute '!curl -fLo ~/.vim/autoload/plug.vim --create-dirs '.plug_url
endif

call plug#begin('~/.vim/plugged')
    Plug 'tpope/vim-commentary'
    Plug 'preservim/nerdtree'
        nnoremap <Leader>n <CMD>NERDTreeToggle<CR>
    Plug 'ctrlpvim/ctrlp.vim'
        let g:ctrlp_map = '<Leader>f'
    Plug 'ap/vim-buftabline'
        hi BufTabLineFill ctermfg=gray ctermbg=black
        hi BufTabLineHidden ctermfg=gray ctermbg=black
        nnoremap <silent> <C-h> <CMD>bprev<CR>
        nnoremap <silent> <C-l> <CMD>bnext<CR>
    Plug 'prabirshrestha/vim-lsp'
    Plug 'mattn/vim-lsp-settings'
    Plug 'prabirshrestha/asyncomplete.vim'
    Plug 'prabirshrestha/asyncomplete-lsp.vim'
        let g:lsp_use_native_client = 1
        let g:lsp_document_code_action_signs_enabled = 0
        let g:lsp_diagnostics_virtual_text_enabled = 0
        let g:lsp_diagnostics_echo_cursor = 1
        let g:lsp_diagnostics_echo_delay = 100
        let g:lsp_settings_enable_suggestions = 0
        let g:lsp_async_completion = 1
        function! LSPSetup() abort
            setlocal omnifunc=lsp#complete
            setlocal signcolumn=yes
            nnoremap <C-]> <plug>(lsp-definition)
            nnoremap <C-W>] <CMD>leftabove LspDefinition<CR>
            nnoremap grn <plug>(lsp-rename)
            nnoremap grr <plug>(lsp-references)
            nnoremap K <plug>(lsp-hover)
            nnoremap <Leader>e <plug>(lsp-document-diagnostics)
            nnoremap <buffer> [d <plug>(lsp-previous-diagnostic)
            nnoremap <buffer> ]d <plug>(lsp-next-diagnostic)
            let l:capabilities = lsp#get_server_capabilities('ruff')
            if !empty(l:capabilities)
              let l:capabilities.hoverProvider = v:false
            endif
        endfunction
        aug lsp_install | au! | au User lsp_buffer_enabled cal LSPSetup() | aug END
        if executable('ruff')
            au user lsp_setup call lsp#register_server({'name': 'ruff', 'cmd': {server_info->['ruff', 'server']}, 'allowlist': ['python']} )
        endif
    Plug 'github/copilot.vim'
call plug#end()
