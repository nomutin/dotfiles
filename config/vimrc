" Minimalist .vimrc by @nomutin
" >>> curl -s https://raw.githubusercontent.com/nomutin/dotfiles/master/config/vimrc -o ~/.vimrc

" ===== Builtin =====
set encoding=utf-8 " options: 24
scriptencoding utf-8
set runtimepath^=~/.vim runtimepath+=~/.vim/after " 1
set incsearch ignorecase smartcase " 2
set nowrap list listchars=tab:»-,trail:-,extends:» scrolloff=4 number relativenumber " 4
set hlsearch cursorline " 5
set hidden " 6
set shortmess=filnxtToO ruler " 11
set clipboard=unnamed "12
set undofile undodir=~/.vim/undo completeopt=menuone,noinsert,noselect pumheight=10 " 13
set tabstop=4 shiftwidth=4 expandtab " 14
set autoread " 18
set noswapfile " 19
set wildmenu " 20
set viminfo= " 25
let g:netrw_banner = 0 | let g:netrw_liststyle = 3 | let g:netrw_altv = 1
aug qf_wrap | au! | autocmd FileType qf setl wrap | aug END

" ===== Plugin =====
if empty(glob('~/.vim/autoload/plug.vim'))
    silent execute '!mkdir -p ~/.vim/undo'
    silent execute '!curl -fLo ~/.vim/autoload/plug.vim --create-dirs '.
        \ 'https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim'
endif

call plug#begin('~/.vim/plugged')
Plug 'tpope/vim-commentary'
Plug 'nomutin/vim-habamax'
Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
Plug 'junegunn/fzf.vim'
Plug 'prabirshrestha/vim-lsp'
Plug 'mattn/vim-lsp-settings'
Plug 'prabirshrestha/asyncomplete.vim'
Plug 'prabirshrestha/asyncomplete-lsp.vim'
call plug#end()

" ===== KeyMappings =====
let g:mapleader = "\<space>"
inoremap <silent> jk <Esc>
nnoremap <silent> <leader>n <CMD>Lex<CR>
nnoremap <C-L> <CMD>nohlsearch<CR>
nnoremap ]q <CMD>cnext<CR>
nnoremap [q <CMD>cprevious<CR>
nnoremap <Leader>d <CMD>new<Bar>setf gitcommit<Bar>setl bt=nofile<Bar>r !git diff #<CR>
nnoremap <Leader>f <CMD>FZF<CR>
if executable('rg')
    let $FZF_DEFAULT_COMMAND='rg --files --hidden --glob "!.git"'
    nnoremap <Leader>/ <CMD>RG<CR>
endif
colorscheme habamax

 " ===== LSP =====
let g:lsp_use_native_client = 1
let g:lsp_document_code_action_signs_enabled = 0
let g:lsp_diagnostics_virtual_text_enabled = 0
let g:lsp_diagnostics_echo_cursor = 1
let g:lsp_diagnostics_echo_delay = 100
let g:lsp_settings_enable_suggestions = 0

function! LSPEnabled() abort
    setlocal omnifunc=lsp#complete
    setlocal signcolumn=yes
    nnoremap <C-]> <plug>(lsp-definition)
    nnoremap <C-W>] <CMD>leftabove LspDefinition<CR>
    nnoremap grn <plug>(lsp-rename)
    nnoremap grr <plug>(lsp-references)
    nnoremap K <plug>(lsp-hover)
    nnoremap <Leader>e <plug>(lsp-document-diagnostics)
    nnoremap <buffer> [d <plug>(lsp-previous-diagnostic)
    nnoremap <buffer> ]d <plug>(lsp-next-diagnostic)
    nnoremap <buffer> <expr><c-j> lsp#scroll(+4)
    nnoremap <buffer> <expr><c-k> lsp#scroll(-4)
endfunction
aug lsp_install | au! | au User lsp_buffer_enabled cal LSPEnabled() | aug END
