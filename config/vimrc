" >>> curl -s https://raw.githubusercontent.com/nomutin/dotfiles/master/config/vimrc -o ~/.vimrc

" ===== Builtin =====
set encoding=utf-8 " options: 24
scriptencoding utf-8
set incsearch ignorecase smartcase " 2
set nowrap list listchars=tab:>\ ,trail:-,extends:>,precedes:<,nbsp:+ scrolloff=4 number relativenumber " 4
set hlsearch cursorline " 5
set hidden " 6
set shortmess=filnxtToO ruler " 11
set clipboard=unnamed "12
set undofile completeopt=menuone,noinsert,noselect pumheight=10 " 13
set tabstop=4 shiftwidth=4 expandtab " 14
set autoread " 18
set noswapfile " 19
set wildmenu " 20
let g:netrw_banner = 0 | let g:netrw_liststyle = 3 | let g:netrw_altv = 1 | let g:netrw_winsize = 30
aug qf_wrap | au! | autocmd FileType qf setl wrap nonu nornu | aug END

" ===== XDG Based Directory =====
set runtimepath+=$XDG_DATA_HOME/vim
set undodir=$XDG_CACHE_HOME/vim/undo | call mkdir(&undodir, 'p')
set viminfofile=$XDG_CACHE_HOME/vim/viminfo
let g:netrw_home = $XDG_DATA_HOME.'/vim'
let vimplugpath = $XDG_DATA_HOME.'/vim'.'/autoload'.'/plug.vim'
let plugdir = $XDG_DATA_HOME.'/vim'.'/plugged'

" ===== Plugin =====
if empty(glob(vimplugpath))
    let plug_url = 'https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim'
    silent execute '!curl -fLo '.vimplugpath.' --create-dirs '.plug_url
endif

call plug#begin(plugdir)
Plug 'nomutin/vim-habamax'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-surround'
Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
Plug 'junegunn/fzf.vim'
Plug 'prabirshrestha/vim-lsp'
Plug 'mattn/vim-lsp-settings'
call plug#end()
colorscheme habamax

" ===== KeyMappings =====
let g:mapleader = "\<space>"
inoremap <silent> jk <Esc>
nnoremap <silent> <leader>n <CMD>Lex<CR>
nnoremap <ESC><ESC> <CMD>nohlsearch<CR>
nnoremap ]q <CMD>cnext<CR>
nnoremap [q <CMD>cprevious<CR>
nnoremap <leader>d <CMD>new<BAR>exec 'read !git show HEAD:#'<BAR>setl bt=nofile ro<BAR>difft<BAR>winc p<BAR>difft<CR>
nnoremap <Leader>f <CMD>Files<CR>
if executable('rg')
    let $FZF_DEFAULT_COMMAND='rg --files --hidden --glob "!.git"'
    nnoremap <Leader>/ <CMD>RG<CR>
endif

 " ===== LSP =====
let g:lsp_use_native_client = 1
let g:lsp_document_code_action_signs_enabled = 0
let g:lsp_diagnostics_virtual_text_enabled = 0
let g:lsp_diagnostics_highlights_insert_mode_enabled = 0
let g:lsp_diagnostics_echo_cursor = 1
let g:lsp_diagnostics_echo_delay = 100
let g:lsp_settings_enable_suggestions = 0
let g:lsp_async_completion = 1

function! LSPSetup() abort
    setlocal omnifunc=lsp#complete
    setlocal signcolumn=yes
    nnoremap <C-]> <plug>(lsp-definition)
    nnoremap <C-W>] <CMD>leftabove LspDefinition<CR>
    nnoremap grn <plug>(lsp-rename)
    nnoremap grr <plug>(lsp-references)
    nnoremap K <plug>(lsp-hover)
    nnoremap <Leader>e <plug>(lsp-document-diagnostics)
    nnoremap <buffer> [d <plug>(lsp-previous-diagnostic)
    nnoremap <buffer> ]d <plug>(lsp-next-diagnostic)
    nnoremap <buffer> <expr><c-j> lsp#scroll(+4)
    nnoremap <buffer> <expr><c-k> lsp#scroll(-4)
    au InsertCharPre <buffer> if !pumvisible() && len(matchstr(getline('.'), '\k\{2,}$')) >= 2
       \ | call feedkeys("\<c-x>\<c-o>", 'n') | endif
endfunction
aug lsp_install | au! | au User lsp_buffer_enabled cal LSPSetup() | aug END
